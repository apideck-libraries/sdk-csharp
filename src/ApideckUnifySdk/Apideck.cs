//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace ApideckUnifySdk
{
    using ApideckUnifySdk.Hooks;
    using ApideckUnifySdk.Models.Components;
    using ApideckUnifySdk.Models.Errors;
    using ApideckUnifySdk.Utils;
    using ApideckUnifySdk.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// Apideck: The Apideck OpenAPI Spec: SDK Optimized
    /// 
    /// <see>https://developers.apideck.com} - Apideck Developer Docs</see>
    /// </summary>
    public interface IApideck
    {
        public IAccounting Accounting { get; }
        public IAts Ats { get; }
        public ICrm Crm { get; }
        public IEcommerce Ecommerce { get; }
        public IFileStorage FileStorage { get; }
        public IHris Hris { get; }
        public ISms Sms { get; }
        public IIssueTracking IssueTracking { get; }
        public IConnector Connector { get; }
        public IVault Vault { get; }
        public IWebhook Webhook { get; }
    }


    /// <summary>
    /// Apideck: The Apideck OpenAPI Spec: SDK Optimized
    /// 
    /// <see>https://developers.apideck.com} - Apideck Developer Docs</see>
    /// </summary>
    public class Apideck: IApideck
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.18.0";
        private const string _sdkGenVersion = "2.728.0";
        private const string _openapiDocVersion = "10.21.6";
        public IAccounting Accounting { get; private set; }
        public IAts Ats { get; private set; }
        public ICrm Crm { get; private set; }
        public IEcommerce Ecommerce { get; private set; }
        public IFileStorage FileStorage { get; private set; }
        public IHris Hris { get; private set; }
        public ISms Sms { get; private set; }
        public IIssueTracking IssueTracking { get; private set; }
        public IConnector Connector { get; private set; }
        public IVault Vault { get; private set; }
        public IWebhook Webhook { get; private set; }

        public Apideck(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            Accounting = new Accounting(SDKConfiguration);

            Ats = new Ats(SDKConfiguration);

            Crm = new Crm(SDKConfiguration);

            Ecommerce = new Ecommerce(SDKConfiguration);

            FileStorage = new FileStorage(SDKConfiguration);

            Hris = new Hris(SDKConfiguration);

            Sms = new Sms(SDKConfiguration);

            IssueTracking = new IssueTracking(SDKConfiguration);

            Connector = new Connector(SDKConfiguration);

            Vault = new Vault(SDKConfiguration);

            Webhook = new Webhook(SDKConfiguration);
        }

        /// <summary>
        /// Initializes a new instance of the SDK with optional configuration parameters.
        /// </summary>
        /// <param name="apiKey">The security configuration to use for API requests. If provided, this will be used as a static security configuration.</param>
        /// <param name="apiKeySource">A function that returns the security configuration dynamically. This takes precedence over the static security parameter if both are provided.</param>
        /// <param name="consumerId">ID of the consumer which you want to get or push data from</param>
        /// <param name="appId">The ID of your Unify application</param>
        /// <param name="serverIndex">The index of the server to use from the predefined server list. Must be between 0 and the length of the server list. Defaults to 0 if not specified.</param>
        /// <param name="serverUrl">A custom server URL to use instead of the predefined server list. If provided with urlParams, the URL will be templated with the provided parameters.</param>
        /// <param name="urlParams">A dictionary of parameters to use for templating the serverUrl. Only used when serverUrl is provided.</param>
        /// <param name="client">A custom HTTP client implementation to use for making API requests. If not provided, the default SpeakeasyHttpClient will be used.</param>
        /// <param name="retryConfig">Configuration for retry behavior when API requests fail. Defines retry strategies, backoff policies, and maximum retry attempts.</param>
        /// <exception cref="Exception">Thrown when the serverIndex is out of range (less than 0 or greater than or equal to the server list length).</exception>
        public Apideck(string? apiKey = null, Func<string>? apiKeySource = null, string? consumerId = null, string? appId = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<ApideckUnifySdk.Models.Components.Security>? _securitySource = null;

            if(apiKeySource != null)
            {
                _securitySource = () => new ApideckUnifySdk.Models.Components.Security() { ApiKey = apiKeySource() };
            }
            else if(apiKey != null)
            {
                _securitySource = () => new ApideckUnifySdk.Models.Components.Security() { ApiKey = apiKey };
            }
            else
            {
                throw new Exception("apiKey and apiKeySource cannot both be null");
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ConsumerId = consumerId,
                AppId = appId,
                ServerIndex = serverIndex == null ? 0 : serverIndex.Value,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            Accounting = new Accounting(SDKConfiguration);

            Ats = new Ats(SDKConfiguration);

            Crm = new Crm(SDKConfiguration);

            Ecommerce = new Ecommerce(SDKConfiguration);

            FileStorage = new FileStorage(SDKConfiguration);

            Hris = new Hris(SDKConfiguration);

            Sms = new Sms(SDKConfiguration);

            IssueTracking = new IssueTracking(SDKConfiguration);

            Connector = new Connector(SDKConfiguration);

            Vault = new Vault(SDKConfiguration);

            Webhook = new Webhook(SDKConfiguration);
        }

        private void InitHooks()
        {
            string preHooksUrl = SDKConfiguration.GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = SDKConfiguration.Hooks.SDKInit(preHooksUrl, SDKConfiguration.Client);
            var config = SDKConfiguration;
            if (preHooksUrl != postHooksUrl)
            {
                config.ServerUrl = postHooksUrl;
            }
            config.Client = postHooksClient;
            SDKConfiguration = config;
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServerIndex(int serverIndex)
            {
                if (serverIndex < 0 || serverIndex >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex}");
                }
                _sdkConfig.ServerIndex = serverIndex;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithConsumerId(string consumerId)
            {
                _sdkConfig.ConsumerId = consumerId;
                return this;
            }

            public SDKBuilder WithAppId(string appId)
            {
                _sdkConfig.AppId = appId;
                return this;
            }

            public SDKBuilder WithApiKeySource(Func<string> apiKeySource)
            {
                _sdkConfig.SecuritySource = () => new ApideckUnifySdk.Models.Components.Security() { ApiKey = apiKeySource() };
                return this;
            }

            public SDKBuilder WithApiKey(string apiKey)
            {
                _sdkConfig.SecuritySource = () => new ApideckUnifySdk.Models.Components.Security() { ApiKey = apiKey };
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public Apideck Build()
            {
              if (_sdkConfig.SecuritySource == null) {
                  throw new Exception("securitySource cannot be null. One of `ApiKey` or `apiKeySource` needs to be defined.");
              }
              return new Apideck(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}