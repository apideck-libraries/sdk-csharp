//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace ApideckUnifySdk.Models.Components
{
    using ApideckUnifySdk.Models.Components;
    using ApideckUnifySdk.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class ExpenseUnionType
    {
        private ExpenseUnionType(string value) { Value = value; }

        public string Value { get; private set; }

        public static ExpenseUnionType Expense1 { get { return new ExpenseUnionType("Expense_1"); } }

        public static ExpenseUnionType Expense2 { get { return new ExpenseUnionType("Expense_2"); } }

        public static ExpenseUnionType Three { get { return new ExpenseUnionType("3"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ExpenseUnionType v) { return v.Value; }
        public static ExpenseUnionType FromString(string v) {
            switch(v) {
                case "Expense_1": return Expense1;
                case "Expense_2": return Expense2;
                case "3": return Three;
                default: throw new ArgumentException("Invalid value for ExpenseUnionType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ExpenseUnionType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(Expense.ExpenseConverter))]
    public class Expense
    {
        public Expense(ExpenseUnionType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Expense1? Expense1 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Expense2? Expense2 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Three? Three { get; set; }

        public ExpenseUnionType Type { get; set; }
        public static Expense CreateExpense1(Expense1 expense1)
        {
            ExpenseUnionType typ = ExpenseUnionType.Expense1;

            Expense res = new Expense(typ);
            res.Expense1 = expense1;
            return res;
        }
        public static Expense CreateExpense2(Expense2 expense2)
        {
            ExpenseUnionType typ = ExpenseUnionType.Expense2;

            Expense res = new Expense(typ);
            res.Expense2 = expense2;
            return res;
        }
        public static Expense CreateThree(Three three)
        {
            ExpenseUnionType typ = ExpenseUnionType.Three;

            Expense res = new Expense(typ);
            res.Three = three;
            return res;
        }

        public class ExpenseConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(Expense);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    throw new InvalidOperationException("Received unexpected null JSON value");
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new Expense(ExpenseUnionType.Expense1)
                    {
                        Expense1 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Expense1>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Expense1), new Expense(ExpenseUnionType.Expense1), "Expense1"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Expense(ExpenseUnionType.Expense2)
                    {
                        Expense2 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Expense2>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Expense2), new Expense(ExpenseUnionType.Expense2), "Expense2"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new Expense(ExpenseUnionType.Three)
                    {
                        Three = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Three>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Three), new Expense(ExpenseUnionType.Three), "Three"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Unexpected null JSON value.");
                }

                Expense res = (Expense)value;

                if (res.Expense1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Expense1));
                    return;
                }

                if (res.Expense2 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Expense2));
                    return;
                }

                if (res.Three != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Three));
                    return;
                }
            }

        }

    }
}