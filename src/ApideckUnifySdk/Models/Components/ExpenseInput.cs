//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace ApideckUnifySdk.Models.Components
{
    using ApideckUnifySdk.Models.Components;
    using ApideckUnifySdk.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class ExpenseInputType
    {
        private ExpenseInputType(string value) { Value = value; }

        public string Value { get; private set; }

        public static ExpenseInputType Expense1Input { get { return new ExpenseInputType("Expense_1_input"); } }

        public static ExpenseInputType Expense2Input { get { return new ExpenseInputType("Expense_2_input"); } }

        public static ExpenseInputType Expense3 { get { return new ExpenseInputType("Expense_3"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(ExpenseInputType v) { return v.Value; }
        public static ExpenseInputType FromString(string v) {
            switch(v) {
                case "Expense_1_input": return Expense1Input;
                case "Expense_2_input": return Expense2Input;
                case "Expense_3": return Expense3;
                default: throw new ArgumentException("Invalid value for ExpenseInputType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((ExpenseInputType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(ExpenseInput.ExpenseInputConverter))]
    public class ExpenseInput
    {
        public ExpenseInput(ExpenseInputType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Expense1Input? Expense1Input { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Expense2Input? Expense2Input { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Expense3? Expense3 { get; set; }

        public ExpenseInputType Type { get; set; }
        public static ExpenseInput CreateExpense1Input(Expense1Input expense1Input)
        {
            ExpenseInputType typ = ExpenseInputType.Expense1Input;

            ExpenseInput res = new ExpenseInput(typ);
            res.Expense1Input = expense1Input;
            return res;
        }
        public static ExpenseInput CreateExpense2Input(Expense2Input expense2Input)
        {
            ExpenseInputType typ = ExpenseInputType.Expense2Input;

            ExpenseInput res = new ExpenseInput(typ);
            res.Expense2Input = expense2Input;
            return res;
        }
        public static ExpenseInput CreateExpense3(Expense3 expense3)
        {
            ExpenseInputType typ = ExpenseInputType.Expense3;

            ExpenseInput res = new ExpenseInput(typ);
            res.Expense3 = expense3;
            return res;
        }

        public class ExpenseInputConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(ExpenseInput);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    throw new InvalidOperationException("Received unexpected null JSON value");
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new ExpenseInput(ExpenseInputType.Expense1Input)
                    {
                        Expense1Input = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Expense1Input>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Expense1Input), new ExpenseInput(ExpenseInputType.Expense1Input), "Expense1Input"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new ExpenseInput(ExpenseInputType.Expense2Input)
                    {
                        Expense2Input = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Expense2Input>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Expense2Input), new ExpenseInput(ExpenseInputType.Expense2Input), "Expense2Input"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new ExpenseInput(ExpenseInputType.Expense3)
                    {
                        Expense3 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Expense3>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Expense3), new ExpenseInput(ExpenseInputType.Expense3), "Expense3"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Unexpected null JSON value.");
                }

                ExpenseInput res = (ExpenseInput)value;

                if (res.Expense1Input != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Expense1Input));
                    return;
                }

                if (res.Expense2Input != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Expense2Input));
                    return;
                }

                if (res.Expense3 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Expense3));
                    return;
                }
            }

        }

    }
}