//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace ApideckUnifySdk.Models.Components
{
    using ApideckUnifySdk.Models.Components;
    using ApideckUnifySdk.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class UpdateConsentRequestResourcesType
    {
        private UpdateConsentRequestResourcesType(string value) { Value = value; }

        public string Value { get; private set; }

        public static UpdateConsentRequestResourcesType MapOfMapOf1 { get { return new UpdateConsentRequestResourcesType("mapOfMapOf1"); } }

        public static UpdateConsentRequestResourcesType Two { get { return new UpdateConsentRequestResourcesType("2"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(UpdateConsentRequestResourcesType v) { return v.Value; }
        public static UpdateConsentRequestResourcesType FromString(string v) {
            switch(v) {
                case "mapOfMapOf1": return MapOfMapOf1;
                case "2": return Two;
                default: throw new ArgumentException("Invalid value for UpdateConsentRequestResourcesType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((UpdateConsentRequestResourcesType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(UpdateConsentRequestResources.UpdateConsentRequestResourcesConverter))]
    public class UpdateConsentRequestResources
    {
        public UpdateConsentRequestResources(UpdateConsentRequestResourcesType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Dictionary<string, Dictionary<string, One>>? MapOfMapOf1 { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public Two? Two { get; set; }

        public UpdateConsentRequestResourcesType Type { get; set; }
        public static UpdateConsentRequestResources CreateMapOfMapOf1(Dictionary<string, Dictionary<string, One>> mapOfMapOf1)
        {
            UpdateConsentRequestResourcesType typ = UpdateConsentRequestResourcesType.MapOfMapOf1;

            UpdateConsentRequestResources res = new UpdateConsentRequestResources(typ);
            res.MapOfMapOf1 = mapOfMapOf1;
            return res;
        }
        public static UpdateConsentRequestResources CreateTwo(Two two)
        {
            UpdateConsentRequestResourcesType typ = UpdateConsentRequestResourcesType.Two;

            UpdateConsentRequestResources res = new UpdateConsentRequestResources(typ);
            res.Two = two;
            return res;
        }

        public class UpdateConsentRequestResourcesConverter : JsonConverter
        {
            public override bool CanConvert(System.Type objectType) => objectType == typeof(UpdateConsentRequestResources);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                if (reader.TokenType == JsonToken.Null)
                {
                    throw new InvalidOperationException("Received unexpected null JSON value");
                }

                var json = JRaw.Create(reader).ToString();
                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new UpdateConsentRequestResources(UpdateConsentRequestResourcesType.MapOfMapOf1)
                    {
                        MapOfMapOf1 = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Dictionary<string, Dictionary<string, One>>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Dictionary<string, Dictionary<string, One>>), new UpdateConsentRequestResources(UpdateConsentRequestResourcesType.MapOfMapOf1), "MapOfMapOf1"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new UpdateConsentRequestResources(UpdateConsentRequestResourcesType.Two)
                    {
                        Two = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Two>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Two), new UpdateConsentRequestResources(UpdateConsentRequestResourcesType.Two), "Two"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null)
                {
                    throw new InvalidOperationException("Unexpected null JSON value.");
                }

                UpdateConsentRequestResources res = (UpdateConsentRequestResources)value;

                if (res.MapOfMapOf1 != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.MapOfMapOf1));
                    return;
                }

                if (res.Two != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Two));
                    return;
                }
            }

        }

    }
}