//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace ApiDeckSdk.Models.Components
{
    using ApiDeckSdk.Models.Components;
    using ApiDeckSdk.Utils;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class Connector
    {

        /// <summary>
        /// ID of the connector.
        /// </summary>
        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Name of the connector.
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Status of the connector. Connectors with status live or beta are callable.
        /// </summary>
        [JsonProperty("status")]
        public ConnectorStatus? Status { get; set; }

        /// <summary>
        /// A description of the object.
        /// </summary>
        [JsonProperty("description")]
        public string? Description { get; set; } = null;

        /// <summary>
        /// Link to a small square icon for the connector.
        /// </summary>
        [JsonProperty("icon_url")]
        public string? IconUrl { get; set; }

        /// <summary>
        /// Link to the full logo for the connector.
        /// </summary>
        [JsonProperty("logo_url")]
        public string? LogoUrl { get; set; }

        /// <summary>
        /// Link to the connector&apos;s website.
        /// </summary>
        [JsonProperty("website_url")]
        public string? WebsiteUrl { get; set; }

        /// <summary>
        /// Link to the connector&apos;s signup page.
        /// </summary>
        [JsonProperty("signup_url")]
        public string? SignupUrl { get; set; }

        /// <summary>
        /// Link to the connector&apos;s partner program signup page.
        /// </summary>
        [JsonProperty("partner_signup_url")]
        public string? PartnerSignupUrl { get; set; }

        /// <summary>
        /// Set to `true` when the connector offers a free trial. Use `signup_url` to sign up for a free trial
        /// </summary>
        [JsonProperty("free_trial_available")]
        public bool? FreeTrialAvailable { get; set; }

        /// <summary>
        /// Type of authorization used by the connector
        /// </summary>
        [JsonProperty("auth_type")]
        public ConnectorAuthType? AuthType { get; set; }

        /// <summary>
        /// Indicates whether a connector only supports authentication. In this case the connector is not mapped to a Unified API, but can be used with the Proxy API
        /// </summary>
        [JsonProperty("auth_only")]
        public bool? AuthOnly { get; set; }

        /// <summary>
        /// Set to `true` when connector was implemented from downstream docs only and without API access. This state indicates that integration will require Apideck support, and access to downstream API to validate mapping quality.
        /// </summary>
        [JsonProperty("blind_mapped")]
        public bool? BlindMapped { get; set; }

        /// <summary>
        /// OAuth grant type used by the connector. More info: https://oauth.net/2/grant-types
        /// </summary>
        [JsonProperty("oauth_grant_type")]
        public ConnectorOauthGrantType? OauthGrantType { get; set; }

        /// <summary>
        /// Location of the OAuth client credentials. For most connectors the OAuth client credentials are stored on integration and managed by the application owner. For others they are stored on connection and managed by the consumer in Vault.
        /// </summary>
        [JsonProperty("oauth_credentials_source")]
        public OauthCredentialsSource? OauthCredentialsSource { get; set; }

        /// <summary>
        /// List of OAuth Scopes available for this connector.
        /// </summary>
        [JsonProperty("oauth_scopes")]
        public List<OauthScopes>? OauthScopes { get; set; }

        /// <summary>
        /// Set to `true` when connector allows the definition of custom scopes.
        /// </summary>
        [JsonProperty("custom_scopes")]
        public bool? CustomScopes { get; set; }

        /// <summary>
        /// Indicates whether Apideck Sandbox OAuth credentials are available.
        /// </summary>
        [JsonProperty("has_sandbox_credentials")]
        public bool? HasSandboxCredentials { get; set; }

        [JsonProperty("settings")]
        public List<ConnectorSetting>? Settings { get; set; }

        /// <summary>
        /// Service provider identifier
        /// </summary>
        [JsonProperty("service_id")]
        public string? ServiceId { get; set; }

        /// <summary>
        /// List of Unified APIs that feature this connector.
        /// </summary>
        [JsonProperty("unified_apis")]
        public List<UnifiedApis>? UnifiedApis { get; set; }

        /// <summary>
        /// List of resources that are supported on the connector.
        /// </summary>
        [JsonProperty("supported_resources")]
        public List<LinkedConnectorResource>? SupportedResources { get; set; }

        /// <summary>
        /// List of resources that have settings that can be configured.
        /// </summary>
        [JsonProperty("configurable_resources")]
        public List<string>? ConfigurableResources { get; set; }

        /// <summary>
        /// List of events that are supported on the connector across all Unified APIs.
        /// </summary>
        [JsonProperty("supported_events")]
        public List<ConnectorEvent>? SupportedEvents { get; set; }

        /// <summary>
        /// How webhooks are supported for the connector. Sometimes the connector natively supports webhooks, other times Apideck virtualizes them based on polling.
        /// </summary>
        [JsonProperty("webhook_support")]
        public WebhookSupport? WebhookSupport { get; set; }

        /// <summary>
        /// When a connector has schema_support, a call can be made to retrieve a json schema that describes a downstream resource.
        /// </summary>
        [JsonProperty("schema_support")]
        public SchemaSupport? SchemaSupport { get; set; }

        [JsonProperty("docs")]
        public List<ConnectorDoc>? Docs { get; set; }

        [JsonProperty("tls_support")]
        public TlsSupport? TlsSupport { get; set; }
    }
}