//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Unify.Models.Components
{
    using Newtonsoft.Json;
    using System;
    using Unify.Utils;
    
    /// <summary>
    /// Status of the delivery of the message.
    /// </summary>
    public enum MessageStatus
    {
        [JsonProperty("accepted")]
        Accepted,
        [JsonProperty("scheduled")]
        Scheduled,
        [JsonProperty("canceled")]
        Canceled,
        [JsonProperty("queued")]
        Queued,
        [JsonProperty("sending")]
        Sending,
        [JsonProperty("sent")]
        Sent,
        [JsonProperty("failed")]
        Failed,
        [JsonProperty("delivered")]
        Delivered,
        [JsonProperty("undelivered")]
        Undelivered,
        [JsonProperty("receiving")]
        Receiving,
        [JsonProperty("received")]
        Received,
        [JsonProperty("read")]
        Read,
    }

    public static class MessageStatusExtension
    {
        public static string Value(this MessageStatus value)
        {
            return ((JsonPropertyAttribute)value.GetType().GetMember(value.ToString())[0].GetCustomAttributes(typeof(JsonPropertyAttribute), false)[0]).PropertyName ?? value.ToString();
        }

        public static MessageStatus ToEnum(this string value)
        {
            foreach(var field in typeof(MessageStatus).GetFields())
            {
                var attributes = field.GetCustomAttributes(typeof(JsonPropertyAttribute), false);
                if (attributes.Length == 0)
                {
                    continue;
                }

                var attribute = attributes[0] as JsonPropertyAttribute;
                if (attribute != null && attribute.PropertyName == value)
                {
                    var enumVal = field.GetValue(null);

                    if (enumVal is MessageStatus)
                    {
                        return (MessageStatus)enumVal;
                    }
                }
            }

            throw new Exception($"Unknown value {value} for enum MessageStatus");
        }
    }

}