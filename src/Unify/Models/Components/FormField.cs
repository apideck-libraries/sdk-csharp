//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Unify.Models.Components
{
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using Unify.Models.Components;
    using Unify.Utils;
    
    public class FormField
    {

        /// <summary>
        /// The unique identifier of the form field.
        /// </summary>
        [JsonProperty("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The label of the field
        /// </summary>
        [JsonProperty("label")]
        public string? Label { get; set; }

        /// <summary>
        /// The placeholder for the form field
        /// </summary>
        [JsonProperty("placeholder")]
        public string? Placeholder { get; set; } = null;

        /// <summary>
        /// The description of the form field
        /// </summary>
        [JsonProperty("description")]
        public string? Description { get; set; } = null;

        [JsonProperty("type")]
        public FormFieldType? Type { get; set; }

        /// <summary>
        /// Indicates if the form field is required, which means it must be filled in before the form can be submitted
        /// </summary>
        [JsonProperty("required")]
        public bool? Required { get; set; }

        [JsonProperty("custom_field")]
        public bool? CustomField { get; set; }

        /// <summary>
        /// Only applicable to select fields. Allow the user to add a custom value though the option select if the desired value is not in the option select list.
        /// </summary>
        [JsonProperty("allow_custom_values")]
        public bool? AllowCustomValues { get; set; } = false;

        /// <summary>
        /// Indicates if the form field is displayed in a “read-only” mode.
        /// </summary>
        [JsonProperty("disabled")]
        public bool? Disabled { get; set; } = null;

        /// <summary>
        /// Indicates if the form field is not displayed but the value that is being stored on the connection.
        /// </summary>
        [JsonProperty("hidden")]
        public bool? Hidden { get; set; } = null;

        /// <summary>
        /// When the setting is deprecated, it should be hidden from the user interface. The value will still be stored on the connection for the sake of backwards compatibility.
        /// </summary>
        [JsonProperty("deprecated")]
        public bool? Deprecated { get; set; } = null;

        /// <summary>
        /// Indicates if the form field contains sensitive data, which will display the value as a masked input.
        /// </summary>
        [JsonProperty("sensitive")]
        public bool? Sensitive { get; set; } = null;

        /// <summary>
        /// Prefix to display in front of the form field.
        /// </summary>
        [JsonProperty("prefix")]
        public string? Prefix { get; set; } = null;

        /// <summary>
        /// Suffix to display next to the form field.
        /// </summary>
        [JsonProperty("suffix")]
        public string? Suffix { get; set; } = null;

        [JsonProperty("options")]
        public List<FormFieldOption>? Options { get; set; }
    }
}